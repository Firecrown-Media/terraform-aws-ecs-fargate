name: Advanced Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - compliance-only

env:
  CHECKOV_VERSION: 3.2.0
  SEMGREP_VERSION: latest

jobs:
  comprehensive-security-scan:
    name: Comprehensive Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Run Checkov Security Scan
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif,cli,json
        output_file_path: reports/checkov-results.sarif
        download_external_modules: true
        quiet: false
        soft_fail: false
        config_file: .checkov.yml

    - name: Run Semgrep SAST Scan
      if: github.event.inputs.scan_type != 'compliance-only'
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/terraform
          p/aws
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    - name: Upload Checkov Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/checkov-results.sarif
        category: checkov

    - name: Upload Semgrep Results
      if: always() && github.event.inputs.scan_type != 'compliance-only'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
        category: semgrep

    - name: Run TFSec Deep Scan
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        additional_args: --detailed-exit-code --include-ignored
        format: sarif
        soft_fail: false

    - name: Upload TFSec Results
      if: always() && (github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == '')
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: tfsec.sarif
        category: tfsec

    - name: Generate Security Report
      if: always()
      run: |
        cat > security-report.md << 'EOF'
        # Security Scan Report
        
        **Scan Date:** $(date)
        **Scan Type:** ${{ github.event.inputs.scan_type || 'scheduled' }}
        **Branch:** ${{ github.ref_name }}
        **Commit:** ${{ github.sha }}
        
        ## Scans Performed
        
        - ‚úÖ Checkov: Infrastructure security and compliance
        - ‚úÖ TFSec: Terraform-specific security issues
        - ‚úÖ Semgrep: Static analysis security testing
        
        ## Results Summary
        
        All results have been uploaded to the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning).
        
        ### Recommendations
        
        1. Review all HIGH and CRITICAL findings immediately
        2. Address MEDIUM findings in the next sprint
        3. Consider LOW findings for future improvements
        4. Update security baseline as needed
        
        EOF
        
        echo "## Security Report Generated" >> $GITHUB_STEP_SUMMARY
        cat security-report.md >> $GITHUB_STEP_SUMMARY

    - name: Archive Security Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          reports/
          *.sarif
          security-report.md
        retention-days: 90

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Check AWS Config Rules Compliance
      run: |
        echo "üîç Validating AWS Config Rules compliance..."
        
        # Check for required tags
        if ! grep -r "Environment.*var.environment" *.tf; then
          echo "‚ùå Missing Environment tag mapping"
          exit 1
        fi
        
        # Check for encryption requirements
        if ! grep -r "encrypted.*=.*true" *.tf; then
          echo "‚ö†Ô∏è Consider enabling encryption for storage resources"
        fi
        
        # Check for least privilege IAM
        if grep -r "\".*:.*\"" *.tf | grep -i "Resource.*\*"; then
          echo "‚ö†Ô∏è Found potential overly broad IAM permissions"
        fi
        
        echo "‚úÖ Basic compliance checks passed"

    - name: Validate Security Groups
      run: |
        echo "üîç Validating Security Group configurations..."
        
        # Check for overly permissive rules
        if grep -r "0.0.0.0/0" *.tf | grep -v "# Allow" | grep -v "description"; then
          echo "‚ö†Ô∏è Found potentially overly permissive security group rules"
        fi
        
        # Check for proper descriptions
        missing_descriptions=$(grep -r "aws_vpc_security_group_.*_rule" *.tf | grep -v "description" | wc -l)
        if [ "$missing_descriptions" -gt 0 ]; then
          echo "‚ö†Ô∏è Found $missing_descriptions security group rules without descriptions"
        fi
        
        echo "‚úÖ Security group validation completed"

  vulnerability-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        category: trivy

  notify-security-team:
    name: Security Team Notification
    runs-on: ubuntu-latest
    needs: [comprehensive-security-scan, compliance-check, vulnerability-scan]
    if: failure() && github.event_name == 'schedule'
    
    steps:
    - name: Send Security Alert
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Security Scan Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `## Security Scan Failure Alert
            
            **Date:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            
            One or more security scans have failed during the scheduled run.
            
            ### Action Required
            
            1. Review the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. Check the [Security tab](${context.payload.repository.html_url}/security/code-scanning) for details
            3. Address any HIGH or CRITICAL findings immediately
            
            ### Scan Results
            
            - Comprehensive Security Scan: ${{ needs.comprehensive-security-scan.result }}
            - Compliance Check: ${{ needs.compliance-check.result }}  
            - Vulnerability Scan: ${{ needs.vulnerability-scan.result }}
            
            Please investigate and resolve these security issues promptly.`,
            labels: ['security', 'urgent']
          })